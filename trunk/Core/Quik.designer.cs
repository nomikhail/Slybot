#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="QUIK")]
	public partial class QuikDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertQuikOrder(QuikOrder instance);
    partial void UpdateQuikOrder(QuikOrder instance);
    partial void DeleteQuikOrder(QuikOrder instance);
    #endregion
		
		public QuikDataContext() : 
				base(global::Core.Properties.Settings.Default.QUIKConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuikDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuikDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuikDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuikDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<QuikOrder> QuikOrders
		{
			get
			{
				return this.GetTable<QuikOrder>();
			}
		}
	}
	
	[Table(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _entity;
		
		private bool _isUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityChanging(string value);
    partial void OnentityChanged();
    partial void OnisUpdatedChanging(bool value);
    partial void OnisUpdatedChanged();
    #endregion
		
		public State()
		{
			OnCreated();
		}
		
		[Column(Storage="_entity", DbType="VarChar(50)", IsPrimaryKey=true)]
		public string entity
		{
			get
			{
				return this._entity;
			}
			set
			{
				if ((this._entity != value))
				{
					this.OnentityChanging(value);
					this.SendPropertyChanging();
					this._entity = value;
					this.SendPropertyChanged("entity");
					this.OnentityChanged();
				}
			}
		}
		
		[Column(Storage="_isUpdated", DbType="Bit NOT NULL")]
		public bool isUpdated
		{
			get
			{
				return this._isUpdated;
			}
			set
			{
				if ((this._isUpdated != value))
				{
					this.OnisUpdatedChanging(value);
					this.SendPropertyChanging();
					this._isUpdated = value;
					this.SendPropertyChanged("isUpdated");
					this.OnisUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Number;
		
		private string _TradeDate;
		
		private string _Time;
		
		private int _OrderCode;
		
		private string _SecCode;
		
		private string _ClassCode;
		
		private string _Operation;
		
		private string _Account;
		
		private decimal _Price;
		
		private int _Quantity;
		
		private System.Nullable<decimal> _Volume;
		
		private string _Dealer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnTradeDateChanging(string value);
    partial void OnTradeDateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnOrderCodeChanging(int value);
    partial void OnOrderCodeChanged();
    partial void OnSecCodeChanging(string value);
    partial void OnSecCodeChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnVolumeChanging(System.Nullable<decimal> value);
    partial void OnVolumeChanged();
    partial void OnDealerChanging(string value);
    partial void OnDealerChanged();
    #endregion
		
		public Transaction()
		{
			OnCreated();
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_TradeDate", DbType="VarChar(50)")]
		public string TradeDate
		{
			get
			{
				return this._TradeDate;
			}
			set
			{
				if ((this._TradeDate != value))
				{
					this.OnTradeDateChanging(value);
					this.SendPropertyChanging();
					this._TradeDate = value;
					this.SendPropertyChanged("TradeDate");
					this.OnTradeDateChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="VarChar(50)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderCode", DbType="Int NOT NULL")]
		public int OrderCode
		{
			get
			{
				return this._OrderCode;
			}
			set
			{
				if ((this._OrderCode != value))
				{
					this.OnOrderCodeChanging(value);
					this.SendPropertyChanging();
					this._OrderCode = value;
					this.SendPropertyChanged("OrderCode");
					this.OnOrderCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SecCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SecCode
		{
			get
			{
				return this._SecCode;
			}
			set
			{
				if ((this._SecCode != value))
				{
					this.OnSecCodeChanging(value);
					this.SendPropertyChanging();
					this._SecCode = value;
					this.SendPropertyChanged("SecCode");
					this.OnSecCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ClassCode", DbType="VarChar(50)")]
		public string ClassCode
		{
			get
			{
				return this._ClassCode;
			}
			set
			{
				if ((this._ClassCode != value))
				{
					this.OnClassCodeChanging(value);
					this.SendPropertyChanging();
					this._ClassCode = value;
					this.SendPropertyChanged("ClassCode");
					this.OnClassCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="VarChar(50)")]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(14,4) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Decimal(14,4)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_Dealer", DbType="VarChar(50)")]
		public string Dealer
		{
			get
			{
				return this._Dealer;
			}
			set
			{
				if ((this._Dealer != value))
				{
					this.OnDealerChanging(value);
					this.SendPropertyChanging();
					this._Dealer = value;
					this.SendPropertyChanged("Dealer");
					this.OnDealerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class QuikOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Time;
		
		private string _SecCode;
		
		private string _Operation;
		
		private decimal _Price;
		
		private int _Quantity;
		
		private int _Remaining;
		
		private System.Nullable<decimal> _Volume;
		
		private string _State;
		
		private string _ClassCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnSecCodeChanging(string value);
    partial void OnSecCodeChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnRemainingChanging(int value);
    partial void OnRemainingChanged();
    partial void OnVolumeChanging(System.Nullable<decimal> value);
    partial void OnVolumeChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    #endregion
		
		public QuikOrder()
		{
			OnCreated();
		}
		
		[Column(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="VarChar(50)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SecCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SecCode
		{
			get
			{
				return this._SecCode;
			}
			set
			{
				if ((this._SecCode != value))
				{
					this.OnSecCodeChanging(value);
					this.SendPropertyChanging();
					this._SecCode = value;
					this.SendPropertyChanged("SecCode");
					this.OnSecCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(14,4) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Remaining", DbType="Int NOT NULL")]
		public int Remaining
		{
			get
			{
				return this._Remaining;
			}
			set
			{
				if ((this._Remaining != value))
				{
					this.OnRemainingChanging(value);
					this.SendPropertyChanging();
					this._Remaining = value;
					this.SendPropertyChanged("Remaining");
					this.OnRemainingChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Decimal(14,4)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_ClassCode", DbType="VarChar(50)")]
		public string ClassCode
		{
			get
			{
				return this._ClassCode;
			}
			set
			{
				if ((this._ClassCode != value))
				{
					this.OnClassCodeChanging(value);
					this.SendPropertyChanging();
					this._ClassCode = value;
					this.SendPropertyChanged("ClassCode");
					this.OnClassCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
